A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

Example 1:

Input: s = "(()())(())"
Output: "()()()"
Explanation: 
The input string is "(()())(())", with primitive decomposition "(()())" + "(())".
After removing outer parentheses of each part, this is "()()" + "()" = "()()()".
Example 2:

Input: s = "(()())(())(()(()))"
Output: "()()()()(())"
Explanation: 
The input string is "(()())(())(()(()))", with primitive decomposition "(()())" + "(())" + "(()(()))".
After removing outer parentheses of each part, this is "()()" + "()" + "()(())" = "()()()()(())".
Example 3:

Input: s = "()()"
Output: ""
Explanation: 
The input string is "()()", with primitive decomposition "()" + "()".
After removing outer parentheses of each part, this is "" + "" = "".



Soln:
Time complexity : O(N)
Space complexity : O(1) 

#include<bits/stdc++.h>
using namespace std;
int main()
{
     string str="(()())(())(()(()))";
     
     int n=str.size();
     int OpenCount=0,CloseCount=0;
     
     //need to know when to pick and not pick
     //not pick ->  when both count are zero but add count based on the current input ( or ) 
     //not pick as it the last char in balancd string -> both count are same then dont pick current instead add the 
     //add the current temp to result and then reset the count as 0 for both
     string temp="";
     string result="";
     int Notpick=1;
     for(int i=0;i<n;i++)
     {
       
            if(str[i]=='(')
             OpenCount++;
            else
             CloseCount++;
      
          if(CloseCount==OpenCount)
          {
          Notpick=1;
          CloseCount=0;
          OpenCount=0;
          result+=temp;
          temp="";
          }
          else
          {           
           if(Notpick!=1)
           {
               temp+=str[i];
           }
           else
            Notpick=0;
          }
            
     }
   
     for(int i=0;i<result.size();i++)
     cout<<result[i];
     
     
}
