You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that 
is a non-empty substring of num, or an empty string "" if no odd integer exists.

A substring is a contiguous sequence of characters within a string.

Example 1:

Input: num = "52"
Output: "5"
Explanation: The only non-empty substrings are "5", "2", and "52". "5" is the only odd number.
Example 2:

Input: num = "4206"
Output: ""
Explanation: There are no odd numbers in "4206".
Example 3:

Input: num = "35427"
Output: "35427"
Explanation: "35427" is already an odd number.

Soln:

Time complexity : O(N)
Space complexity : O(1)

#include<bits/stdc++.h>
using namespace std;
int main()
{
    string num="456789";  //-> 4567
    
    int n=num.size();
    int idx=n-1;
    int currMax=0;
    while(idx>=0)
    {
        int currNum=num[idx]-'0';
        
        if(currNum%2!=0)
        {
            int i=0;
            int sum=0;
            while(i<=idx)      // 4 5 6 7 ->  0*10+4 -> 4  4*10+5->45 45*10+6->456 456*10+7->4567 
            {
               int nums=num[i]-'0';
               sum=sum*10+nums;
               i++;
            }
            currMax=max(currMax,sum);
            break;
        }
        idx--;
    }
    cout<<currMax;
}
 
